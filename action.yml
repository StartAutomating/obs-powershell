
name: ScriptOBS
description: Automate Open Broadcast Studio with PowerShell.
inputs: 
  obsPowershellScript: 
    required: false
    description: |
      A PowerShell Script that uses obs-powershell.  
      Any files outputted from the script will be added to the repository.
      If those files have a .Message attached to them, they will be committed with that message.
  SkipOBSPS1: 
    required: false
    description: 'If set, will not process any files named *.obs.ps1'
  ModuleName: 
    required: false
    description: |
      The name of the module for which types and formats are being generated.
      If not provided, this will be assumed to be the name of the root directory.
  CommitMessage: 
    required: false
    description: If provided, will commit any remaining changes made to the workspace with this commit message.
  UserEmail: 
    required: false
    description: The user email associated with a git commit.
  UserName: 
    required: false
    description: The user name associated with a git commit.
branding: 
  icon: terminal
  color: blue
runs: 
  using: composite
  steps: 
    - name: obspowershellAction
      id: obspowershellAction
      shell: pwsh
      env: 
        CommitMessage: ${{inputs.CommitMessage}}
        ModuleName: ${{inputs.ModuleName}}
        SkipOBSPS1: ${{inputs.SkipOBSPS1}}
        UserEmail: ${{inputs.UserEmail}}
        UserName: ${{inputs.UserName}}
        obsPowershellScript: ${{inputs.obsPowershellScript}}
      run: |
        $Parameters = @{}
        $Parameters.obsPowershellScript = ${env:obsPowershellScript}
        $Parameters.SkipOBSPS1 = ${env:SkipOBSPS1}
        $Parameters.SkipOBSPS1 = $parameters.SkipOBSPS1 -match 'true';
        $Parameters.ModuleName = ${env:ModuleName}
        $Parameters.CommitMessage = ${env:CommitMessage}
        $Parameters.UserEmail = ${env:UserEmail}
        $Parameters.UserName = ${env:UserName}
        foreach ($k in @($parameters.Keys)) {
            if ([String]::IsNullOrEmpty($parameters[$k])) {
                $parameters.Remove($k)
            }
        }
        Write-Host "::debug:: obspowershellAction $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
        & {<#
        .Synopsis
            GitHub Action for obs-powershell
        .Description
            GitHub Action for obs-powershell.  This will:
        
            * Import obs-powershell    
            * Get all demos in the current directory
            * Export each demo to a markdown file.
            * Run any .obs.ps1 scripts
            * Run the content of the .obsPowerShellScript parameter
            
            Any files changed can be outputted by the script, and those changes can be checked back into the repo.
            Make sure to use the "persistCredentials" option with checkout.
        #>
        
        param(
        # A PowerShell Script that uses obs-powershell.  
        # Any files outputted from the script will be added to the repository.
        # If those files have a .Message attached to them, they will be committed with that message.
        [string]
        $obsPowershellScript,
        
        # If set, will not process any files named *.obs.ps1
        [switch]
        $SkipOBSPS1,
        
        # The name of the module for which types and formats are being generated.
        # If not provided, this will be assumed to be the name of the root directory.
        [string]
        $ModuleName,
        
        # If provided, will commit any remaining changes made to the workspace with this commit message.
        [string]
        $CommitMessage,
        
        # The user email associated with a git commit.
        [string]
        $UserEmail,
        
        # The user name associated with a git commit.
        [string]
        $UserName
        )
        
        #region Initial Logging
        
        # Output the parameters passed to this script (for debugging)
        "::group::Parameters" | Out-Host
        [PSCustomObject]$PSBoundParameters | Format-List | Out-Host
        "::endgroup::" | Out-Host
        
        # Get the GitHub Event
        $gitHubEvent = 
            if ($env:GITHUB_EVENT_PATH) {
                [IO.File]::ReadAllText($env:GITHUB_EVENT_PATH) | ConvertFrom-Json
            } else { $null }
        
        # Log the GitHub Event
        @"
        ::group::GitHubEvent
        $($gitHubEvent | ConvertTo-Json -Depth 100)
        ::endgroup::
        "@ | Out-Host
        
        # Check that there is a workspace (and throw if there is not)
        if (-not $env:GITHUB_WORKSPACE) { throw "No GitHub workspace" }
        
        #endregion Initial Logging
        
        # Check to ensure we are on a branch
        $branchName = git rev-parse --abrev-ref HEAD
        # If we were not, return.
        if (-not $branchName) {
            "::warning::Not on a branch" | Out-Host
            return
        }
        
        #region Configure UserName and Email
        if (-not $UserName)  {
            $UserName =  
                if ($env:GITHUB_TOKEN) {
                    Invoke-RestMethod -uri "https://api.github.com/user" -Headers @{
                        Authorization = "token $env:GITHUB_TOKEN"
                    } |
                        Select-Object -First 1 -ExpandProperty name
                } else {
                    $env:GITHUB_ACTOR
                }
        }
        
        if (-not $UserEmail) { 
            $GitHubUserEmail = 
                if ($env:GITHUB_TOKEN) {
                    Invoke-RestMethod -uri "https://api.github.com/user/emails" -Headers @{
                        Authorization = "token $env:GITHUB_TOKEN"
                    } |
                        Select-Object -First 1 -ExpandProperty email
                } else {''}
            $UserEmail = 
                if ($GitHubUserEmail) {
                    $GitHubUserEmail
                } else {
                    "$UserName@github.com"
                }    
        }
        git config --global user.email $UserEmail
        git config --global user.name  $UserName
        #endregion Configure UserName and Email
        
        
        git pull | Out-Host
        
        
        #region Load Action Module
        $ActionModuleName     = "obs-powershell"
        $ActionModuleFileName = "$ActionModuleName.psd1"
        
        # Try to find a local copy of the action's module.
        # This allows the action to use the current branch's code instead of the action's implementation.
        $PSD1Found = Get-ChildItem -Recurse -Filter "*.psd1" |
            Where-Object Name -eq $ActionModuleFileName | 
            Select-Object -First 1
        
        $ActionModulePath, $ActionModule = 
            # If there was a .PSD1 found
            if ($PSD1Found) {
                $PSD1Found.FullName # import from there.
                Import-Module $PSD1Found.FullName -Force -PassThru
            } 
            # Otherwise, if we have a GITHUB_ACTION_PATH
            elseif ($env:GITHUB_ACTION_PATH) 
            {
                $actionModulePath = Join-Path $env:GITHUB_ACTION_PATH $ActionModuleFileName
                if (Test-path $actionModulePath) {
                    $actionModulePath
                    Import-Module $actionModulePath -Force -PassThru
                } else {
                    throw "$actionModuleName not found"
                }
            } 
            elseif (-not (Get-Module $ActionModuleName)) {
                throw "$actionModulePath could not be loaded."
            }
        
        "::notice title=ModuleLoaded::$actionModuleName Loaded from Path - $($actionModulePath)" | Out-Host
        #endregion Load Action Module
        
        "::group::Installing OBS" | Out-Host
        sudo apt update && sudo apt install -y software-properties-common
        sudo add-apt-repository ppa:obsproject/obs-studio && sudo apt update && sudo apt install -y xserver-xorg-video-dummy ffmpeg obs-studio x11vnc xvfb
        Get-command obs* -CommandType Application | Out-Host
        "::endgroup::" | Out-Host
        
        
        
        #region Install/Import Other Modules
        @"
        ::group::Installing Modules
        $(
            "Installing ugit" | Out-Host
            Install-Module -Name ugit -Scope CurrentUser -Force    
            "Importing ugit" | Out-Host
            Import-Module ugit -Force -PassThru -Global | Out-Host
        )
        ::endgroup::
        "@ | Out-Host
        
        
        #endregion Install Other Modules
        
        #region Declare Functions and Variables
        $anyFilesChanged = $false
        filter ProcessScriptOutput {
            $out = $_
            $outItem = Get-Item -Path $out -ErrorAction SilentlyContinue
            $fullName, $shouldCommit = 
                if ($out -is [IO.FileInfo]) {
                    $out.FullName, (git status $out.Fullname -s)
                } elseif ($outItem) {
                    $outItem.FullName, (git status $outItem.Fullname -s)
                }
            if ($shouldCommit) {
                git add $fullName
                if ($out.Message) {
                    git commit -m "$($out.Message)"
                } elseif ($out.CommitMessage) {
                    git commit -m "$($out.CommitMessage)"
                } elseif ($out.SourceFile) {
                    "Source File: $($out.SourceFile)" | Out-Host
                    $lastCommitMessage = $out.SourceFile |
                        git log -n 1 |
                        Select-Object -ExpandProperty CommitMessage
                    if ($lastCommitMessage) {
                        git commit -m $lastCommitMessage
                    }
                } elseif ($gitHubEvent.head_commit.message) {
                    git commit -m "$($gitHubEvent.head_commit.message)"
                }
                $anyFilesChanged = $true
            }
            $out
        }
        
        #endregion Declare Functions and Variables
        
        
        #region Actual Action
        $obspowershellScriptStart = [DateTime]::Now
        if ($obsPowershellScript) {
            Invoke-Expression -Command $obsPowershellScript |
                . processScriptOutput |
                Out-Host
        }
        $obsPowershellScriptTook = [Datetime]::Now - $obsPowershellScriptStart
        $obsPowershellPS1Start = [DateTime]::Now
        $obsPowershellPS1List  = @()
        if (-not $SkipobsPowershellPS1) {
            $obsPowershellFiles = @(
            Get-ChildItem -Recurse -Path $env:GITHUB_WORKSPACE |
                Where-Object Name -Match '\.obs\.ps1$')
                
            if ($obsPowershellFiles) {
                $obsPowershellFiles|        
                    ForEach-Object {
                        $scriptFile = $_
                        $obsPowershellPS1List += $_.FullName.Replace($env:GITHUB_WORKSPACE, '').TrimStart('/')
                        $obsPowershellPS1Count++
                        "::notice title=Running::$($_.Fullname)" | Out-Host
                        . $_.FullName |
                            Add-Member SourceFile $scriptFile -Force -PassThru |
                            . processScriptOutput  | 
                            Out-Host
                    }
            }
        }
        
        "Fetching Changes"  | Out-Host
        git fetch --unshallow  | Out-Host
        
        $obsPowershellPS1EndStart = [DateTime]::Now
        $obsPowershellPS1Took = [Datetime]::Now - $obsPowershellPS1Start
        if ($CommitMessage -or $anyFilesChanged) {
            if ($CommitMessage) {
                dir $env:GITHUB_WORKSPACE -Recurse |
                    ForEach-Object {
                        $gitStatusOutput = git status $_.Fullname -s
                        if ($gitStatusOutput) {
                            git add $_.Fullname
                        }
                    }
        
                git commit -m $ExecutionContext.SessionState.InvokeCommand.ExpandString($CommitMessage)
            }    
        
            $checkDetached = git symbolic-ref -q HEAD
            if (-not $LASTEXITCODE) {
                "::notice::Pulling Updates" | Out-Host
                git pull
                "::notice::Pushing Changes" | Out-Host        
                git push        
                "Git Push Output: $($gitPushed  | Out-String)"
            } else {
                "::notice::Not pushing changes (on detached head)" | Out-Host
                $LASTEXITCODE = 0
                exit 0
            }
        }
        
        #endregion Actual Action
        
        } @Parameters

